{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/Components/Earth.svelte","../../src/Components/Factories/F1.svelte","../../src/Components/Factories/F2.svelte","../../src/Components/Factories/F3.svelte","../../src/Components/Timer.svelte","../../src/Components/ProgressBar.svelte","../../src/ts/utils.ts","../../src/App.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.44.0' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","<div id=\"earth\" class=\"earth\">\n  <div class=\"imgs\">\n    <img src=\"./images/earth.png\" alt=\"\" />\n    <img src=\"./images/earth.png\" alt=\"\" />\n  </div>\n</div>\n\n<style lang=\"scss\">\n  @import \"../styles/vars.scss\";\n  .earth {\n    width: 40%;\n    aspect-ratio: 1 / 1;\n    /* CENTER EARTH */\n    margin: 0 auto;\n\n    z-index: 1;\n    position: relative;\n\n    box-sizing: border-box;\n    /* FOR SOME REASON CSS FORGETS THAT I DO OVERFLOW HIDDEN \n      WHEN ROTATING 90DEG SO I GOTTA ROTATE IT BY 90.00001DEG */\n    transform: rotateZ(90.00001deg);\n\n    overflow: hidden;\n\n    border-radius: 50%;\n    border: 5px #000 solid;\n    .imgs {\n      animation: move 5s linear infinite;\n      height: 100%;\n      width: calc(100% * 2);\n      display: flex;\n    }\n  }\n\n  @keyframes move {\n    from {\n      transform: translateX(0);\n    }\n    to {\n      transform: translateX(-50%);\n    }\n  }\n</style>\n","<svg viewBox=\"0 0 1122 1066\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n  <rect x=\"733\" y=\"391\" width=\"306\" height=\"128\" fill=\"#434343\" />\n  <rect x=\"464\" y=\"57\" width=\"109\" height=\"462\" fill=\"#434343\" />\n  <rect x=\"635\" y=\"57\" width=\"113\" height=\"462\" fill=\"#434343\" />\n  <rect x=\"37\" y=\"846\" width=\"1000\" height=\"218\" fill=\"#434343\" />\n  <rect x=\"369\" y=\"578\" width=\"669\" height=\"209\" fill=\"#434343\" />\n  <rect x=\"618\" y=\"4\" width=\"144.121\" height=\"59.4461\" fill=\"#737373\" />\n  <rect x=\"455\" y=\"4\" width=\"128\" height=\"59\" fill=\"#737373\" />\n  <rect x=\"733\" y=\"346\" width=\"323.095\" height=\"45.3403\" fill=\"#737373\" />\n  <rect x=\"369\" y=\"517\" width=\"751\" height=\"65\" fill=\"#737373\" />\n  <rect x=\"7\" y=\"785\" width=\"1113\" height=\"61\" fill=\"#737373\" />\n  <rect x=\"795.021\" y=\"421.176\" width=\"48.0404\" height=\"40.3025\" fill=\"white\" />\n  <rect x=\"876.03\" y=\"421.176\" width=\"47.0984\" height=\"40.3025\" fill=\"white\" />\n  <rect x=\"952.33\" y=\"421.176\" width=\"50.8663\" height=\"40.3025\" fill=\"white\" />\n  <rect x=\"630.177\" y=\"602.537\" width=\"45.2145\" height=\"111.839\" fill=\"white\" />\n  <rect x=\"704.592\" y=\"602.537\" width=\"49.9243\" height=\"111.839\" fill=\"white\" />\n  <rect x=\"782.775\" y=\"602.537\" width=\"47.0984\" height=\"111.839\" fill=\"white\" />\n  <rect x=\"860.959\" y=\"602.537\" width=\"47.0984\" height=\"111.839\" fill=\"white\" />\n  <rect x=\"937.258\" y=\"602.537\" width=\"52.7502\" height=\"111.839\" fill=\"white\" />\n  <path\n    d=\"M476.145 0.899984C459.414 1.39998 453.245 1.79998 452.31 2.79998C450.908 4.29998 450.067 50.9 451.282 60L452.03 65.5L457.17 65.8L462.311 66.1L462.498 290.5L462.685 515H426.886C407.164 515 385.947 515.3 379.684 515.7C368.655 516.3 368.187 516.4 367.346 518.8C366.785 520.3 366.505 573.3 366.505 652.1V783H185.267H4.02947L2.90783 785.9C1.31885 790.2 1.97313 845.4 3.65559 847.2C4.49682 848.1 9.07683 848.6 19.5454 848.8L34.2202 849.2L34.4071 956.2C34.594 1035.3 34.8745 1063.6 35.7157 1064.6C36.6504 1065.8 111.052 1066 536.339 1066C878.906 1066 1036.4 1065.7 1037.71 1065C1039.49 1064 1039.49 1061.7 1039.49 956.5V849L1076.22 848.9C1096.32 848.9 1114.73 848.5 1117.07 848.2L1121.27 847.5L1121.74 817.5C1122.02 801 1121.93 786.5 1121.55 785.2L1120.81 783H1080.15H1039.49L1039.39 707.2C1039.39 665.6 1039.21 628.1 1039.02 624C1038.83 619.9 1038.93 608.9 1039.21 599.7L1039.77 582.9L1063.23 583C1118.94 583.3 1120.81 583.2 1120.81 581C1120.81 579.9 1121.09 579 1121.55 579C1121.93 579 1122.11 565.2 1121.93 548.3C1121.74 520.9 1121.55 517.4 1120.15 516.2C1118.94 515.3 1109.21 515 1079.12 515H1039.77L1039.3 461.7C1039.11 432.5 1039.02 405.5 1039.3 401.8L1039.67 395.1L1047.99 394.4C1052.76 394 1056.68 393.2 1057.25 392.5C1057.9 391.7 1058.09 382.9 1057.99 367.9L1057.71 344.5L1055.38 344.4C1054.07 344.4 1052.39 344 1051.73 343.6C1051.08 343.1 982.844 342.8 900.123 342.9L749.73 343.1V205.1V67H755.245C760.293 67 760.947 66.7 762.723 64.1C764.592 61.3 764.686 59.9 764.686 33.2C764.686 17.3 764.312 3.99998 763.751 2.59998L762.816 -1.58846e-05H688.975H615.041L614.293 2.29998C613.826 3.59998 613.545 17.4 613.639 33.2C613.732 67.7 613.171 66 624.668 66H631.959V290.5V515H603.45H574.942V427.7C574.849 379.8 574.755 278.7 574.662 203.2L574.475 66H576.531C579.522 66 583.261 64 583.728 62.1C584.57 59.3 586.159 28.9 586.159 16.5C586.159 7.59998 585.785 3.89998 584.85 2.39998C583.541 0.599984 581.952 0.499984 541.106 0.399984C517.832 0.399984 488.576 0.599984 476.145 0.899984ZM581.205 17.3C580.831 24 580.27 36.6 579.99 45.2L579.335 61H517.271H455.208L455.955 58.7C456.329 57.5 456.516 44.9 456.423 30.8L456.049 4.99998L518.954 5.09998H581.765L581.205 17.3ZM750.665 5.79998L759.545 6.09998L759.825 33.6L760.012 61L701.874 61.1C669.814 61.1 638.221 61.2 631.491 61.3L619.34 61.5L619.06 33.2L618.873 4.79998L680.282 5.19998C714.118 5.39998 745.805 5.59998 750.665 5.79998ZM569.521 202.5C569.427 277.3 569.427 378.2 569.334 426.8V515L518.206 514.8C489.978 514.6 467.078 514.2 467.265 513.7C467.359 513.3 467.452 412.4 467.452 289.5V66L518.58 66.2L569.708 66.5L569.521 202.5ZM744.122 204.5V343H738.701C735.71 343 732.812 343.5 732.158 344.2C731.317 345.1 731.037 351.6 731.037 367.2C731.037 395.3 730.382 394 743.748 394H753.469L753.376 454.5V515H695.425H637.567L637.473 505.2C637.473 499.9 637.286 398.9 637.099 280.7L636.726 66H690.377H744.122V204.5ZM1052.57 368.7V389H894.141H735.71V368.4V347.8L894.141 348.2L1052.57 348.5V368.7ZM1034.63 454.7L1034.81 514.8L1011.26 515.2C998.266 515.4 936.389 515.3 873.765 515L759.825 514.5L759.451 454.2L759.077 394L896.758 394.2L1034.35 394.5L1034.63 454.7ZM1116.13 549.1V578L905.638 578.1C789.829 578.2 693.555 578.3 691.779 578.3C690.003 578.4 617.097 578.3 529.89 578.2L371.178 578V549V520L743.655 520.1L1116.13 520.2V549.1ZM1034.81 668.7C1034.81 715.9 1034.53 760.9 1034.16 768.7L1033.6 783H702.435H371.272L371.178 683V583H702.996H1034.81V668.7ZM1115.94 815.7L1116.13 843H562.417C257.8 843 8.51601 842.7 8.32907 842.2C8.14213 841.8 8.14213 829.5 8.32907 814.8L8.60948 788L562.137 788.3L1115.66 788.5L1115.94 815.7ZM1034.35 954.2V1060H536.9H39.361V954.5V849L90.115 848.8C117.969 848.6 341.829 848.5 587.561 848.5H1034.35V954.2Z\"\n    fill=\"black\"\n  />\n  <path\n    d=\"M795.063 421.1C793.287 422 793.194 423.2 792.913 440.7C792.727 450.9 792.913 461 793.194 463.1L793.848 467H819.365H844.789L845.443 461.9C845.817 459.1 846.004 449.9 845.911 441.5C845.911 433 846.098 425.6 846.472 425C846.752 424.5 846.752 423.1 846.472 422C845.911 420.1 845.07 420 821.422 420.1C807.495 420.1 796.091 420.6 795.063 421.1ZM840.209 425.5C841.05 425.8 841.331 430.4 841.331 444V462H820.394C805.719 462 799.176 461.7 798.709 460.9C798.054 459.7 797.774 454.4 797.307 436.1C797.026 427.3 797.12 426.7 799.082 425.6C800.671 424.7 806.56 424.5 820.113 424.8C830.488 425 839.555 425.3 840.209 425.5Z\"\n    fill=\"black\"\n  />\n  <path\n    d=\"M872.176 441.9C872.176 454 872.456 464.5 872.736 465.4C873.204 466.8 876.475 467 899.282 467C919.191 467 925.36 466.7 925.64 465.7C926.014 464.7 925.921 426 925.547 421.2C925.453 420.3 919.471 420 898.815 420H872.176V441.9ZM920.406 429.6C920.126 432.2 919.845 440.6 919.845 448.2V462.2L898.815 461.8L877.784 461.5V443.2V425H899.375H921.06L920.406 429.6Z\"\n    fill=\"black\"\n  />\n  <path\n    d=\"M949.008 442.9C949.195 455.5 949.569 466.1 949.942 466.5C950.971 467.6 1004.15 467.2 1005.18 466.1C1006.68 464.5 1006.12 421.8 1004.62 420.8C1004.06 420.4 991.163 420 976.114 420H948.727L949.008 442.9ZM1000.23 443.5V462H977.329H954.429V443.5V425H977.329H1000.23V443.5Z\"\n    fill=\"black\"\n  />\n  <path\n    d=\"M947.419 599.9C935.548 600.5 935.361 600.5 934.707 603C934.333 604.4 934.053 630.6 933.959 661.2C933.959 706.3 934.146 717.2 935.174 718.2C936.109 719.3 942.184 719.6 963.402 719.5H990.415L990.695 660.6C990.789 624.9 990.508 601.2 990.041 600.7C988.919 599.5 963.869 599.1 947.419 599.9ZM985.274 659.1V712.9L969.197 713.2C960.318 713.4 949.942 713.4 946.297 713.2L939.474 712.8V660.5C939.474 631.7 939.287 607.6 939.006 606.8C938.633 605.7 942.839 605.5 961.907 605.4L985.274 605.2V659.1Z\"\n    fill=\"black\"\n  />\n  <path\n    d=\"M635.51 600.7C632.613 600.9 629.809 601.7 629.155 602.4C628.407 603.4 628.22 619.4 628.407 659.5C628.687 713.8 628.687 715.2 630.557 716.7C633.454 719 673.085 718 677.665 715.5L680.75 713.7L680.189 658.2C679.909 627.6 679.348 602.3 678.88 601.8C678.133 601 643.455 600 635.51 600.7ZM676.824 659.8L676.731 714.6L670.001 713.8C666.262 713.4 656.354 713.1 647.848 713.1L632.426 713L632.706 659L632.893 605H654.859H676.824V659.8Z\"\n    fill=\"black\"\n  />\n  <path\n    d=\"M706.08 601C704.958 601.5 703.743 602.9 703.463 604.2C703.183 605.5 703.089 630.9 703.183 660.8C703.463 713.8 703.463 715.2 705.332 716.6C706.921 717.9 711.314 718.1 731.691 717.8C746.459 717.6 756.554 717.1 757.115 716.5C757.956 715.6 758.517 664.5 758.236 621.3L758.143 603.1L755.339 601.5C753.095 600.3 748.609 600 730.382 600.1C718.138 600.1 707.202 600.5 706.08 601ZM754.404 659.2V713.5L730.85 713.2L707.202 712.9V659V605H730.85H754.404V659.2Z\"\n    fill=\"black\"\n  />\n  <path\n    d=\"M793.661 600.8C787.305 600.9 781.697 601.4 781.323 601.8C780.949 602.2 780.482 628.1 780.388 659.3C780.108 708.9 780.295 716.2 781.51 717C783.193 718.1 830.021 718.3 831.61 717.2C832.264 716.8 832.825 712.6 833.012 707C833.573 689.8 832.918 603.5 832.171 602.4C831.423 601.1 812.822 600.3 793.661 600.8ZM828.993 659.2C828.806 701.9 828.432 713.5 827.591 713.4C826.936 713.3 816.935 713.2 805.345 713.1L784.314 713V659V605H806.84H829.273L828.993 659.2Z\"\n    fill=\"black\"\n  />\n  <path\n    d=\"M858.903 601.1C857.407 602 857.314 606.1 857.314 657.3C857.407 687.7 857.688 713.6 858.062 715L858.716 717.5L883.579 717.8C905.638 718 908.535 717.9 909.657 716.4C911.526 714 911.246 607.4 909.377 603.3L908.161 600.5L884.327 600.3C869.558 600.1 859.838 600.4 858.903 601.1ZM905.544 616.2C905.17 622.4 904.89 646.7 904.89 670.2V713H883.859H862.829V671.2C862.735 648.3 862.642 624 862.548 617.2L862.361 605H884.233H906.105L905.544 616.2Z\"\n    fill=\"black\"\n  />\n  <rect\n    class=\"createSpawn\"\n    x=\"515\"\n    y=\"7\"\n    width=\"1\"\n    height=\"1\"\n    fill=\"white\"\n    fill-opacity=\"0.01\"\n  />\n  <rect\n    class=\"createSpawn\"\n    x=\"676\"\n    y=\"7\"\n    width=\"1\"\n    height=\"1\"\n    fill=\"white\"\n    fill-opacity=\"0.01\"\n  />\n</svg>\n","<svg viewBox=\"0 0 765 730\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n  <g clip-path=\"url(#clip0_1:14)\">\n    <path\n      d=\"M676.122 279.791L763.122 387.431L676.122 495.07L589.122 387.431L676.122 279.791Z\"\n      fill=\"#EEEEEE\"\n    />\n    <rect x=\"675.122\" y=\"386.93\" width=\"85\" height=\"61.0791\" fill=\"#EEEEEE\" />\n    <rect x=\"404.122\" y=\"279.791\" width=\"273\" height=\"165.214\" fill=\"#EEEEEE\" />\n    <rect x=\"3.12189\" y=\"442.001\" width=\"760\" height=\"285.37\" fill=\"#EEEEEE\" />\n    <rect x=\"534.122\" y=\"386.93\" width=\"106\" height=\"94.1219\" fill=\"white\" />\n    <rect x=\"534.122\" y=\"532.118\" width=\"106\" height=\"100.13\" fill=\"white\" />\n    <rect x=\"386.122\" y=\"533.12\" width=\"102\" height=\"101.131\" fill=\"white\" />\n    <rect x=\"242.122\" y=\"535.122\" width=\"99\" height=\"99.1284\" fill=\"white\" />\n    <rect x=\"101.122\" y=\"534.121\" width=\"98\" height=\"101.131\" fill=\"white\" />\n    <path\n      d=\"M474.722 0.329346L470.922 0.930124L470.622 8.43985C470.422 12.5452 469.522 23.1589 468.722 31.9703C467.822 40.7817 466.922 50.8948 466.622 54.4995C466.322 58.1042 465.222 70.4201 464.122 82.0352C463.022 93.5501 461.222 112.975 460.222 125.091C459.022 137.307 455.922 160.537 453.222 177.158C448.522 205.095 442.322 246.648 439.822 266.875L438.822 275.486L431.322 276.187C427.222 276.487 419.322 276.787 413.722 276.787C408.122 276.787 403.022 277.188 402.222 277.689C400.922 278.49 400.722 287.301 400.722 337.566L400.622 396.442L370.122 396.142L339.722 395.842L332.922 391.836C324.022 386.63 321.622 383.225 318.422 371.31L315.822 361.397L316.222 326.852C316.922 270.279 316.722 249.052 315.322 233.231C314.622 224.92 313.622 212.604 313.122 205.795C312.522 198.987 311.422 188.673 310.722 182.766C309.922 176.958 308.722 167.946 308.122 162.74C307.322 155.631 306.322 151.826 304.022 147.72C299.922 139.91 285.922 125.191 279.122 121.486C261.922 112.174 254.622 110.071 242.222 110.873C229.022 111.774 221.422 114.577 210.522 122.688C205.122 126.693 200.522 130.898 199.522 132.801C198.622 134.603 196.222 138.508 194.222 141.512C192.222 144.516 189.222 151.225 187.522 156.432L184.422 166.044L174.822 169.248C160.122 174.155 149.822 180.062 143.222 187.372C131.322 200.388 123.122 217.31 120.022 234.733C119.122 239.94 118.722 253.858 118.722 279.992L118.622 317.841L102.622 317.941C83.0219 318.141 81.3219 318.241 78.1219 320.644C74.2219 323.548 69.3219 331.458 67.1219 338.567C65.2219 344.675 65.1219 347.88 65.1219 391.937V438.797L34.9219 439.198C18.2219 439.398 3.8219 439.899 2.9219 440.399C2.0219 440.8 1.0219 441.801 0.721895 442.602C0.421895 443.303 0.121895 507.586 0.0218951 585.287C-0.0781049 712.752 0.121895 726.77 1.5219 728.172C2.9219 729.574 38.2219 729.774 379.822 729.974C587.122 730.075 758.422 729.874 760.622 729.474L764.622 728.873L764.922 559.353C765.122 397.644 765.022 389.634 763.322 386.129C762.322 384.026 753.222 371.61 743.022 358.593C732.922 345.476 722.822 332.359 720.622 329.356C718.422 326.452 713.722 320.744 710.222 316.639C706.722 312.634 698.522 303.222 692.122 295.812C685.622 288.402 679.022 281.093 677.422 279.591L674.522 276.787H646.622C631.222 276.787 606.022 276.487 590.522 276.087L562.422 275.486L560.222 257.362C557.122 230.828 552.322 188.173 551.622 180.663C550.422 167.346 543.022 98.857 542.122 92.3485C541.622 88.6437 540.222 72.9234 539.122 57.3031C536.122 14.748 535.022 2.03155 534.322 1.23051C533.422 0.329346 479.822 -0.471692 474.722 0.329346ZM251.222 118.583C256.022 119.083 262.922 120.685 266.722 122.087C270.522 123.489 275.522 125.391 277.922 126.192C281.422 127.494 283.522 129.497 289.722 137.807C297.722 148.321 300.622 153.728 301.522 160.036C301.922 162.139 302.422 164.342 302.722 164.842C303.022 165.343 303.522 170.55 303.722 176.457C303.922 182.365 305.022 192.078 306.222 198.186C309.622 216.209 311.522 291.106 309.722 337.366C308.722 364.301 309.822 373.413 315.622 384.827C320.422 394.44 323.522 397.344 331.522 399.847C337.822 401.749 340.622 401.95 369.722 401.95H401.122V420.974V439.899H334.022L266.922 439.799L267.622 354.088C268.022 306.826 268.322 261.768 268.322 253.758C268.322 212.504 253.722 184.368 224.922 170.249C214.622 165.243 204.422 163.04 195.522 163.941L190.322 164.442L191.822 158.835C195.022 146.619 206.022 129.897 213.522 125.892C220.922 121.887 233.622 117.681 238.622 117.681C240.822 117.581 246.522 118.082 251.222 118.583ZM680.422 288.402C692.122 302.22 724.922 343.674 733.122 354.889C737.722 361.197 743.322 368.406 745.522 370.909C747.822 373.413 751.622 378.019 754.122 381.223C756.622 384.327 758.922 386.93 759.322 386.93C759.822 386.93 760.122 463.029 760.122 556.049V725.068L382.622 725.168L5.1219 725.268V639.457C5.1219 592.296 4.9219 528.914 4.8219 498.775L4.6219 443.804L8.62189 444.405C15.1219 445.306 72.7219 445.306 243.122 444.605C331.422 444.204 403.922 443.503 404.322 443.203C404.722 442.802 405.122 406.255 405.222 361.898L405.322 281.293L540.022 281.393L674.622 281.494L680.422 288.402ZM119.122 380.922V438.998H94.6219H70.1219L70.2219 392.838L70.3219 346.778L73.2219 341.071C74.8219 337.967 78.0219 333.261 80.3219 330.557C84.4219 326.051 85.0219 325.751 92.6219 324.549C97.0219 323.748 104.822 323.047 109.922 323.047L119.122 322.847V380.922Z\"\n      fill=\"black\"\n    />\n    <path\n      d=\"M537.922 385.628C534.022 385.929 533.022 386.429 532.622 388.232C532.322 389.433 532.222 411.562 532.322 437.496L532.622 484.557L586.922 484.857L641.122 485.057L642.222 482.354C643.922 477.848 643.022 388.632 641.222 386.53C640.022 385.128 635.122 384.928 591.222 385.128C564.522 385.228 540.522 385.428 537.922 385.628ZM583.222 391.736C583.522 392.137 583.522 401.549 583.322 412.563L582.922 432.79L560.722 433.19C548.622 433.39 538.322 433.49 537.922 433.29C537.422 433.09 537.122 423.277 537.122 411.662V390.435L559.822 390.735C572.422 390.935 582.922 391.336 583.222 391.736ZM638.122 411.862C638.122 423.778 637.722 433.09 637.222 433.49C636.722 433.791 626.122 433.691 613.722 433.39L591.122 432.689V411.762V390.935H614.622H638.122V411.862ZM583.322 459.224C583.522 469.838 583.522 478.849 583.322 479.25C583.122 479.75 572.722 480.051 560.022 480.051H537.122V460.025V439.999H560.022H583.022L583.322 459.224ZM637.922 459.524L637.622 479.049L614.422 479.45L591.122 479.951V460.225V440.5L614.622 440.199L638.122 439.999L637.922 459.524Z\"\n      fill=\"black\"\n    />\n    <path\n      d=\"M410.122 530.116L383.622 530.616L382.922 536.123C381.922 544.835 382.122 632.448 383.222 634.451C384.122 636.153 387.122 636.253 436.722 636.053C487.422 635.752 489.322 635.652 490.722 633.85C492.722 631.046 492.822 531.317 490.822 530.516C488.822 529.815 440.522 529.515 410.122 530.116ZM424.222 534.722L434.622 535.422L434.322 556.55C434.122 568.165 433.922 577.777 433.722 577.877C433.622 577.978 423.422 578.178 411.122 578.178L388.622 578.278L388.322 556.249L388.122 534.121H400.922C408.022 534.121 418.522 534.421 424.222 534.722ZM487.522 556.45C487.522 568.365 487.222 578.378 486.922 578.679C486.622 578.979 476.422 578.879 464.322 578.478L442.122 577.877V556.65C442.122 545.035 442.322 535.222 442.522 535.022C442.722 534.822 453.022 534.621 465.322 534.722L487.622 534.822L487.522 556.45ZM487.222 590.894C487.322 594.699 487.422 605.313 487.522 614.725L487.622 631.747L464.622 631.447C452.022 631.247 441.622 630.946 441.622 630.946C441.622 630.846 441.722 620.533 441.922 608.017L442.222 585.287L457.922 584.887C466.522 584.786 476.622 584.486 480.422 584.386L487.122 584.186L487.222 590.894ZM433.722 586.489C433.822 586.589 434.122 596.702 434.522 608.918L435.122 631.247H411.622H388.122V608.017V584.887L410.822 585.587C423.322 585.988 433.622 586.389 433.722 586.489Z\"\n      fill=\"black\"\n    />\n    <path\n      d=\"M532.522 530.216C532.122 530.917 531.822 554.047 531.722 581.783C531.622 621.834 531.922 632.448 532.922 633.449C534.822 635.352 639.422 635.352 641.322 633.449C642.322 632.448 642.622 621.634 642.822 582.083C642.922 554.447 642.722 531.317 642.422 530.516C642.022 529.315 633.422 529.114 587.622 529.114C548.022 529.114 533.022 529.415 532.522 530.216ZM583.922 552.745C584.122 563.158 583.922 573.171 583.622 574.874L583.022 578.178H560.722H538.422L537.822 562.958C537.422 554.647 537.122 544.534 537.122 540.429V533.119L560.422 533.42L583.622 533.82L583.922 552.745ZM630.422 533.72L638.122 534.421V556.55V578.678L614.922 578.378C602.122 578.178 591.622 577.978 591.522 577.877C591.422 577.777 591.122 567.864 590.922 555.949L590.522 534.221L598.622 533.82C615.422 533.119 623.022 533.119 630.422 533.72ZM583.922 607.816L584.122 629.945L569.022 630.546C549.422 631.447 539.922 631.447 538.622 630.446C537.922 630.045 537.722 621.834 537.922 607.416L538.322 585.187L560.922 585.387L583.622 585.688L583.922 607.816ZM637.922 607.716L637.622 630.245L626.622 630.446C620.622 630.446 609.922 630.446 602.922 630.345L590.122 630.245V608.417C590.122 596.401 590.422 586.188 590.822 585.888C591.122 585.487 601.922 585.187 614.822 585.187H638.122L637.922 607.716Z\"\n      fill=\"black\"\n    />\n    <path\n      d=\"M246.122 531.117L239.622 531.617L239.022 565.161C238.622 583.585 238.622 607.215 239.022 617.729L239.622 636.754L291.022 637.054C328.322 637.354 342.622 637.154 343.522 636.253C345.822 633.95 344.922 533.62 342.522 531.117C341.822 530.516 254.322 530.516 246.122 531.117ZM288.122 557.551C288.122 569.066 287.822 578.879 287.522 579.379C287.222 579.78 277.322 580.18 265.522 580.18H244.122L244.022 561.857C243.922 551.844 243.722 541.931 243.622 539.828L243.222 536.123L265.722 536.324L288.322 536.624L288.122 557.551ZM339.722 540.729C339.422 543.333 339.122 553.246 339.122 562.758V580.18H317.222H295.422L294.722 574.874C294.422 572.07 294.122 562.157 294.122 552.845V536.123H317.222H340.422L339.722 540.729ZM287.322 597.403C287.422 603.11 287.622 613.223 287.622 619.932V632.248H272.622C264.422 632.248 254.622 632.548 250.922 632.949L244.122 633.55V610.319V587.189H265.622H287.122L287.322 597.403ZM339.122 607.416C339.122 618.63 339.422 628.743 339.722 629.945L340.322 632.248H317.122C296.322 632.248 294.022 632.048 294.522 630.646C294.822 629.745 295.122 619.631 295.122 608.117V587.189H317.122H339.122V607.416Z\"\n      fill=\"black\"\n    />\n    <path\n      d=\"M119.622 532.018L98.6219 532.619L97.7219 571.069C97.2219 592.697 97.2219 615.426 97.7219 623.136L98.6219 636.754L112.622 637.455C120.322 637.955 143.522 638.156 164.122 637.955L201.622 637.755L202.322 621.734C202.722 612.923 202.722 589.392 202.422 569.467C201.822 533.82 201.822 533.22 199.722 532.619C196.922 531.618 145.822 531.317 119.622 532.018ZM134.022 537.125H146.422L145.922 558.653C145.622 570.568 145.222 580.381 145.022 580.581C144.822 580.781 135.222 581.082 123.622 581.282L102.622 581.682L102.322 558.753L102.122 535.823L111.822 536.424C117.222 536.824 127.222 537.125 134.022 537.125ZM198.122 558.452C198.122 570.768 197.922 581.082 197.722 581.282C197.522 581.482 187.122 581.582 174.722 581.382L152.122 581.082V559.153V537.125L172.922 536.824C184.322 536.724 194.622 536.524 195.922 536.324L198.122 536.123V558.452ZM145.022 588.691C145.222 588.892 145.622 599.005 145.922 611.221L146.422 633.249H137.022C131.822 633.249 121.922 633.55 114.922 633.95L102.122 634.551V611.521C102.122 598.905 102.322 588.291 102.522 588.091C103.022 587.59 144.422 588.191 145.022 588.691ZM198.122 610.72V633.249H174.522H150.822L151.522 624.037C151.822 619.031 152.122 608.918 152.122 601.508V588.191H175.122H198.122V610.72Z\"\n      fill=\"black\"\n    />\n    <rect\n      class=\"createSpawn\"\n      x=\"503.122\"\n      y=\"8.43983\"\n      width=\"1\"\n      height=\"1\"\n      fill=\"black\"\n    />\n  </g>\n  <defs>\n    <clipPath id=\"clip0_1:14\">\n      <rect width=\"765\" height=\"730\" fill=\"white\" />\n    </clipPath>\n  </defs>\n</svg>\n","<svg viewBox=\"0 0 1135 944\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n  <g clip-path=\"url(#clip0_1:60)\">\n    <path\n      d=\"M242.088 215.603L271.558 616.136L237.333 617.19L242.088 215.603Z\"\n      fill=\"#C4C4C4\"\n    />\n    <path\n      d=\"M649.37 69.172C649.37 73.0659 649.505 77.0117 649.169 80.8808C648.887 84.1215 648.268 87.4698 648.227 90.7281C648.203 92.6771 648.227 94.6279 648.227 96.5772C648.227 98.176 648.718 99.7262 648.947 101.305C649.303 103.758 649.975 106.123 650.121 108.593C650.351 112.512 650.322 116.431 650.322 120.365C650.322 122.008 650.322 123.651 650.322 125.294C650.322 125.718 650.197 126.909 649.856 125.791C649.295 123.947 649.774 121.404 649.983 119.519C650.274 116.901 650.644 114.345 650.713 111.702C650.88 105.271 651.289 98.8095 650.131 92.4415C649.889 91.1067 649.751 89.8815 649.751 88.528C649.751 87.0627 649.135 91.403 649.031 92.8646C648.478 100.666 649.011 108.361 650.311 116.081C651.081 120.653 651.274 125.26 651.274 129.884C651.274 130.638 651.1 130.629 650.597 131.132C650.126 131.604 649.257 131.576 649.031 130.9C648.692 129.881 648.926 128.202 649 127.134C649.091 125.804 649.552 124.754 650.174 123.623C650.707 122.651 651.646 121.832 652.31 120.947C653.01 120.013 653.718 119.152 654.51 118.292C655.306 117.428 656.431 116.21 656.89 115.14C657.188 114.444 657.926 113.946 658.128 113.342\"\n      stroke=\"#5B5B5B\"\n      stroke-width=\"3\"\n      stroke-linecap=\"round\"\n    />\n    <rect x=\"174\" y=\"5\" width=\"65\" height=\"613\" fill=\"#5B5B5B\" />\n    <rect x=\"650\" y=\"16\" width=\"91\" height=\"601\" fill=\"#5B5B5B\" />\n    <rect x=\"417\" y=\"17\" width=\"62\" height=\"601\" fill=\"#5B5B5B\" />\n    <path\n      d=\"M420.844 36.5732C420.844 42.0218 420.549 47.5027 420.549 53.0202C420.549 55.3396 420.254 57.4223 420.254 59.7201C420.254 60.8053 419.959 62.0076 419.959 63.1766C419.959 64.3698 420.168 65.8221 419.812 66.9607C419.44 68.1515 419.913 69.4392 419.648 70.6302C419.343 72.0011 418.485 72.8369 418.485 74.316C418.485 77.4632 418.78 80.5826 418.78 83.7517C418.78 86.2034 418.78 88.6552 418.78 91.1069C418.78 93.936 417.895 96.7268 417.895 99.5433C417.895 111.353 416.421 123.09 416.421 134.894C416.421 137.735 415.831 140.467 415.831 143.314C415.831 146.263 415.831 149.212 415.831 152.16C415.831 154.927 416.126 157.529 416.126 160.269C416.126 162.619 415.831 165.094 415.831 167.346C415.831 168.036 415.729 173.132 415.536 173.03C414.155 172.299 414.357 168.061 414.357 166.756C414.357 165.112 415.049 163.228 415.241 161.596C415.524 159.192 415.938 161.355 416.11 162.644C416.307 164.123 416.126 165.765 416.126 167.264C416.126 170.047 415.536 172.688 415.536 175.455C415.536 179.403 415.536 183.351 415.536 187.298C415.536 191.192 415.536 195.085 415.536 198.978C415.536 202.51 415.241 205.954 415.241 209.495C415.241 217.009 415.241 224.522 415.241 232.036C415.241 237.431 415.241 242.826 415.241 248.221C415.241 257.433 415.253 266.644 415.225 275.856C415.208 281.517 415.497 287.629 415.012 293.335C414.968 293.859 414.318 292.489 413.833 292.287C413.48 292.14 413.101 291.924 412.817 291.697C412.028 291.066 412.293 289.972 412.293 288.83C412.293 286.185 413.184 284.043 413.456 281.459C413.607 280.018 414.062 278.815 414.062 277.331C414.062 276.2 414.062 275.07 414.062 273.94C414.062 271.755 414.062 269.571 414.062 267.387C414.062 262.06 413.472 257.004 413.472 251.677C413.472 249.389 413.472 247.101 413.472 244.814C413.472 243.459 413.472 242.105 413.472 240.751C413.472 222.808 413.472 276.637 413.472 294.58\"\n      stroke=\"#5B5B5B\"\n      stroke-width=\"10\"\n      stroke-linecap=\"round\"\n    />\n    <path d=\"M174 125L195.651 618.5H152.349L174 125Z\" fill=\"#5B5B5B\" />\n    <path d=\"M648 89L673.115 616.25H622.885L648 89Z\" fill=\"#5B5B5B\" />\n    <path\n      d=\"M418.328 26.6128L456.758 615.985L395.411 616.792L418.328 26.6128Z\"\n      fill=\"#5B5B5B\"\n    />\n    <path\n      d=\"M239.332 35.0224L271.996 616.705L219.172 617.273L239.332 35.0224Z\"\n      fill=\"#5B5B5B\"\n    />\n    <path\n      d=\"M741.085 46.378L785.593 615.576L713.615 616.132L741.085 46.378Z\"\n      fill=\"#5B5B5B\"\n    />\n    <path\n      d=\"M478.624 35.0193L511.541 616.699L458.211 617.272L478.624 35.0193Z\"\n      fill=\"#5B5B5B\"\n    />\n    <rect x=\"4\" y=\"619\" width=\"1129\" height=\"321\" fill=\"#C4C4C4\" />\n    <rect x=\"59\" y=\"786\" width=\"96\" height=\"131\" fill=\"white\" />\n    <rect x=\"183\" y=\"786\" width=\"98\" height=\"131\" fill=\"white\" />\n    <rect x=\"320\" y=\"786\" width=\"96\" height=\"131\" fill=\"white\" />\n    <rect x=\"435\" y=\"786\" width=\"97\" height=\"131\" fill=\"white\" />\n    <rect x=\"545\" y=\"786\" width=\"102\" height=\"131\" fill=\"white\" />\n    <rect x=\"698\" y=\"786\" width=\"102\" height=\"131\" fill=\"white\" />\n    <g clip-path=\"url(#clip1_1:60)\">\n      <path\n        d=\"M172.7 1.80006C171.8 3.00006 171.8 3.40006 172.8 3.80006C173.7 4.10006 173.9 6.00006 173.5 11.3001C173.2 15.3001 172.8 32.2001 172.6 49.0001C172.1 90.8001 169.3 171 167.5 196.5C166.7 208 165.8 228.1 165.5 241C165.2 253.9 164.3 274.8 163.5 287.5C162.7 300.1 161.9 323.5 161.6 339.5C160.4 400.6 157.7 471.4 155.5 495.9C153.2 521.6 151.9 552 151.7 584.5L151.5 614.5L77.1 614.7C36.2 614.8 2.3 615.3 1.9 615.7C1.4 616.2 0.9 689.6 0.7 778.9C0.5 937.8 0.5 941.2 2.4 942.6C4.1 943.8 85.9 943.9 568.6 943.7C878.9 943.6 1133.2 943.1 1133.7 942.7C1134.1 942.2 1134.5 868.6 1134.5 779V616.2L1128.6 615.6C1125.4 615.3 1052 615 965.6 615C879.2 615 804.1 614.7 798.8 614.3L789 613.7V610.4C789 608.5 787 588.7 784.5 566.3C782.1 543.8 779.4 514.9 778.5 502C777.6 489.1 776.3 472 775.5 464C774.7 456 773.4 436.9 772.5 421.5C771.7 406.1 770.3 385.2 769.5 375C768.7 364.8 767.8 352.4 767.5 347.5C767.1 342.5 766 331.1 765 322C763.9 312.9 762.6 299 762 291C761.4 283 759.8 266.1 758.5 253.5C757.2 240.8 755.6 217.4 755.1 201.5C752.8 138.8 752.1 125.4 751 128.5C750.7 129.5 749.8 125.5 749.2 119.4C748 108.5 747.5 101.7 744.4 58.5001C743.5 45.8001 742.4 32.1001 742.1 28.0001C741.5 20.8001 741.4 20.6001 740.6 24.7001C739.6 30.3001 741.6 75.0001 744.1 98.5001C747.1 127.8 748.8 150.3 750 176C751.9 216.9 755 258.7 758 284C761.2 310.8 765.2 354.5 765.7 368C766 374.9 766.6 380.9 767.1 381.4C767.6 382 768 389.8 768 398.9C768 413.6 769 440.9 770.4 463C770.7 468 770.6 469.3 770.1 467L769.3 463.5L769.1 466.6C769.1 468.3 770.1 479.1 771.5 490.6C772.9 502.1 774.2 516 774.4 521.5C774.7 527 775.4 537.1 775.9 544C776.4 550.9 777 561.2 777.1 566.8C777.2 574.2 777.6 577.2 778.6 577.8C779.5 578.3 780.7 584.5 782.3 596L784.6 613.5L764.1 614.1C752.8 614.4 717.1 614.8 684.8 614.9L626 615V607.7C626 599.4 628.6 554.9 630 538.5C631 526 632.5 495.7 635.6 420.5C635.9 412.8 636.3 392.1 636.5 374.5C636.7 356.9 637.3 335.3 637.9 326.5C638.5 317.7 639.4 297.9 640 282.5C640.6 267.1 642 242.4 643 227.6C644.1 212.8 644.9 199.6 644.9 198.1C644.8 195.6 644.7 195.6 644 198.5C643.3 201.4 643.2 201.4 643.1 197.5C643.1 195.3 643.5 189.7 644 185C646.4 164.1 647 154.4 648 122C648.6 103 649.7 74.4001 650.5 58.5001C651.4 42.5001 652.1 26.8001 652.3 23.5001L652.5 17.5001L687 17.9001C727.5 18.3001 739 17.7001 739 15.0001C739 13.4001 737.7 13.1001 729.5 12.5001C722.5 12.0001 648.1 12.4001 646.3 12.9001C645.2 13.3001 646.3 17.0001 647.5 17.0001C649.4 17.0001 649.4 22.1001 647.5 45.0001C646.3 59.2001 643.4 129.4 643.3 145.5C643.3 147.7 642.8 156.5 642.2 165C640.6 185.4 638.1 234.7 637.9 248C637.8 253.8 637.1 264.3 636.4 271.5C633.3 302.5 631.9 332.5 630.5 395.5C630 416.3 629.9 418.4 627 463.5C623.4 520.1 622 553.2 622.1 583.2C622.1 599.5 621.9 613.4 621.5 614C620.7 615.3 513.3 615.3 512.5 614C511.7 612.7 511.1 600.6 510 561C509.5 541.5 508.3 517.5 507.5 507.8C506.7 498 505.6 478.2 505 463.8C504.4 449.3 503.5 433.9 502.9 429.5C502.3 425.1 501.4 418.3 500.9 414.5C500.4 410.6 499.6 392.7 499.1 374.7C498.5 356.7 497.4 331.9 496.6 319.7C495.7 307.5 494.6 288.7 494 278C493.4 267.3 492.3 250.6 491.5 241C490.8 231.4 489.9 213.8 489.5 202C489.2 190.2 488.1 162.5 487 140.5C485.9 118.5 484.6 88.1001 484 73.0001C482.8 39.4001 481.1 14.8001 480 13.6001C479.1 12.7001 417.5 12.1001 416.6 13.1001C416.3 13.4001 415.8 19.0001 415.5 25.6001C415 38.5001 414.7 42.1001 413.2 52.0001C412.6 55.6001 411.7 74.7001 411.1 94.5001C410.4 114.3 409.3 144.7 408.5 162C407.7 179.3 407 203.6 407 216C407 228.4 406.5 248.6 405.9 261C405.3 273.4 404.7 287.8 404.6 293C404.5 298.2 403.8 313.7 403.2 327.5C400.3 390.4 399.9 400.9 400.2 406.5C400.5 413.7 399 458.2 398.4 459.2C398.1 459.6 397.5 492.9 396.9 533.2C396.4 573.5 395.7 608.3 395.4 610.5L394.8 614.5L334.1 614.6L273.4 614.8L272.1 599.1C271.4 590.5 270.5 573.6 270 561.5C269.5 549.4 268.4 530.7 267.6 520C266.7 509.3 265.6 488.8 265 474.5C264 448.2 262.7 426.5 261 406.5C260.5 400.4 259.6 382 259 365.5C258.5 349 257.6 328.1 257 319C256.4 309.9 255.5 291.5 254.9 278.1C254.4 264.8 253.4 251.7 252.8 249.1C252.2 246.6 251.6 241.3 251.4 237.5C250.7 225.6 248.1 166.9 247 139.5C246.4 125.2 245.5 102 245 87.9001C244.2 67.5001 240.5 9.50006 239.8 6.30006C239.8 5.80006 240 4.70006 240.5 3.60006C241 2.40006 240.8 1.50006 239.9 0.900056C239.1 0.400056 224.6 5.62537e-05 206.2 0.100056C178.9 0.300056 173.8 0.600056 172.7 1.80006ZM237.3 7.40006C237 8.70006 237.8 25.0001 238.9 43.6001C241.9 91.0001 242.8 108.8 244 145.5C246.1 211.8 247.6 237.3 251.5 274.5C252.3 282.2 252.9 293.4 253 299.5C253 305.5 253.4 316.3 254 323.5C254.5 330.6 255.2 352.8 255.4 372.8C255.7 392.7 256.2 409.5 256.5 409.9C256.8 410.4 257.7 423.1 258.5 438.2C259.4 453.2 260.7 470 261.5 475.5C263.1 486.8 265.4 527.5 264.5 528.9C264 529.8 266.9 575.7 269 599.5C269.5 605.5 270 611.9 270 613.7V616.9L213.6 616.7L157.2 616.5L157.4 592C157.7 567.8 160.3 509.3 162 489C162.5 483.2 162.9 465.2 163 449C163.1 432.8 163.8 409.1 164.7 396.5C165.6 382.9 166.4 355.5 166.5 329.5C166.7 305.3 167.3 279.2 167.9 271.5C172.1 218.7 173.2 197.2 173.5 160C173.7 138.3 174.3 113.3 174.8 104.5C175.3 95.7001 175.8 86.9001 175.8 85.0001C175.8 83.1001 176.1 64.3001 176.5 43.2001L177.3 5.00006H207.5H237.7L237.3 7.40006ZM478.1 41.0001C478 54.1001 478.4 68.3001 479 73.0001C479.6 77.7001 480.4 94.1001 480.8 109.5C481.3 126.9 482 138.3 482.7 139.5C483.3 140.6 484.3 150.7 484.9 162C485.6 173.3 486.5 186.5 487.1 191.5C487.6 196.4 488.2 212.6 488.4 227.5C488.8 255.4 489.5 273.9 491.1 299C491.6 307 492.4 325.4 493 340C494.8 389.8 496.7 419.9 499 436.5C499.5 440.3 500.4 457.9 501 475.5C502.4 516.4 503.7 541.9 505.6 564.5C506.4 574.4 507.3 589.8 507.7 598.6L508.3 614.7L453.1 614.9L397.8 615L398.4 603.3C398.8 596.8 399.5 584.1 400.1 575C400.6 565.9 401.2 544.1 401.5 526.5C401.7 508.9 402.6 485.9 403.4 475.5C404.3 464.2 404.9 444.5 404.9 427C404.9 410.8 405.5 382.7 406.4 364.7C407.3 346.6 408.2 318.3 408.5 301.7C408.8 285.1 409.8 252.8 410.6 230C411.7 200.2 411.9 186.4 411.2 181C410.6 176.9 410.3 170.3 410.6 166.5C411.9 144.7 413.3 123 414.6 103.5C415.4 91.4001 416.3 67.1001 416.7 49.5001L417.3 17.5001H447.8H478.3L478.1 41.0001ZM375.5 619.8C456.7 619.4 508.3 619.9 509.2 621.3C509.8 622.2 510.2 622.2 510.9 621.1C511.7 619.9 556.4 619.6 820.9 619.3L1130 619L1130.2 777.5C1130.2 864.7 1130.3 936.5 1130.4 937.1C1130.5 937.9 979.3 938.2 568.6 938.1C259.5 938 6.5 937.9 6.4 937.7C6.2 937.5 5.9 865.9 5.8 778.6L5.5 619.7L143.5 620.4C230.4 620.8 283.5 620.7 287 620.1C290 619.5 301.7 619.3 313 619.6C324.3 619.8 352.4 619.9 375.5 619.8Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M58.3 783.8C57.3 784.4 57 799.9 56.8 851.1C56.7 887.6 56.9 918.1 57.4 918.8C57.9 919.7 69.2 920 107 920H155.9L157.1 917.8C158 916.1 158.2 899.7 157.8 850.4C157.5 814.5 156.9 784.7 156.5 784.1C155.8 782.8 60.2 782.6 58.3 783.8ZM152.7 808.7C152.3 820.7 152 849.7 152 873.3V916L106.8 915.8L61.5 915.5L61.2 851.2L61 787H107.2H153.3L152.7 808.7Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M180.7 783.7C179.6 785.4 179.1 916.2 180.1 918.1C181 919.9 183 920 232 920C268.9 920 283.1 919.7 283.6 918.9C284.6 917.3 284.7 785.8 283.7 784.2C283.1 783.3 271.6 783 232 783C204 783 180.9 783.3 180.7 783.7ZM279.6 851.5L279.7 916H232.4C187.9 916 185 915.9 185 914.2C185 913.3 184.7 884.3 184.4 849.7L183.8 787H231.7H279.5L279.6 851.5Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M318.5 784.2C318.2 784.9 318.1 815.6 318.2 852.5L318.5 919.5H368.5C401.9 919.6 418.7 919.2 419.2 918.5C420.1 917.3 420 800.5 419.1 790.5L418.5 783.5L368.7 783.2C329.4 783 318.8 783.2 318.5 784.2ZM415.1 852C415 887.5 414.8 916.5 414.7 916.6C414.6 916.6 393.7 916.4 368.3 916.2L322 915.8V851.4V787L368.7 787.2L415.4 787.5L415.1 852Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M433.2 783.8C432.3 784.5 432 798.9 432 851.4C432 888.1 432.2 918.6 432.6 919.1C432.9 919.6 454 920 483.6 920H534L535.1 917.3C536.3 914.1 535.9 786.2 534.7 784.2C534.1 783.3 522.9 783 484.2 783C456.9 783 433.9 783.4 433.2 783.8ZM531 851.5V916H483.5H436V851.5V787H483.5H531V851.5Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M543.3 783.7C541.5 784.4 541.4 917 543.2 918.8C544.1 919.7 557.1 920 595.7 920C644.5 920 647 919.9 647.9 918.2C648.5 917 648.8 892.1 648.7 849.9L648.5 783.5L596.5 783.3C567.9 783.2 543.9 783.4 543.3 783.7ZM644.2 827.7C644.3 850.2 644.4 879.2 644.5 892.2V916H595.3H546V851.5V787H595H644L644.2 827.7Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M697.5 783.9C696.7 785.2 696.7 917.7 697.5 919C698.3 920.3 802.6 920.4 803.5 919.1C804.3 917.7 804 792.2 803.2 787.5L802.5 783.5L750.3 783.2C718.1 783.1 697.9 783.3 697.5 783.9ZM799.3 793.7C799.1 797.5 798.8 826.4 798.7 858L798.5 915.5L750.3 915.8L702 916V851.5V787H750.9H799.7L799.3 793.7Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M735.412 14.6019C735.835 14.6905 736.238 14.7762 736.669 14.8154C736.946 14.8406 737.171 15.0196 737.407 15.0871C737.908 15.2302 738.268 15.6035 738.68 15.9293C738.919 16.1183 739.16 16.3021 739.398 16.4921C739.613 16.6641 740.05 17.0104 740.159 17.2645C740.403 17.8343 740.372 18.3503 740.372 18.9645C740.372 19.5597 740.372 20.1548 740.372 20.7499C740.372 21.2561 740.512 21.7451 740.512 22.2559C740.512 22.7991 740.498 23.4129 740.597 23.9482C740.712 24.5631 740.703 25.1611 740.791 25.7801\"\n        stroke=\"black\"\n        stroke-width=\"3\"\n        stroke-linecap=\"round\"\n      />\n      <path\n        d=\"M740.952 29.9925C740.952 28.8941 740.75 27.8459 740.75 26.7591\"\n        stroke=\"black\"\n        stroke-width=\"3\"\n        stroke-linecap=\"round\"\n      />\n    </g>\n    <rect\n      class=\"createSpawn\"\n      x=\"206\"\n      y=\"18\"\n      width=\"1\"\n      height=\"1\"\n      fill=\"#5B5B5B\"\n    />\n    <rect\n      class=\"createSpawn\"\n      x=\"448\"\n      y=\"34\"\n      width=\"1\"\n      height=\"1\"\n      fill=\"#5B5B5B\"\n    />\n    <rect\n      class=\"createSpawn\"\n      x=\"696\"\n      y=\"37\"\n      width=\"1\"\n      height=\"1\"\n      fill=\"#5B5B5B\"\n    />\n  </g>\n  <defs>\n    <clipPath id=\"clip0_1:60\">\n      <rect width=\"1135\" height=\"944\" fill=\"white\" />\n    </clipPath>\n    <clipPath id=\"clip1_1:60\">\n      <rect\n        width=\"1135\"\n        height=\"949\"\n        fill=\"white\"\n        transform=\"translate(0 -5)\"\n      />\n    </clipPath>\n  </defs>\n</svg>\n","<script>\n  // The data/time we want to countdown to\n  const endDate = new Date(\"Jul 21, 2029\").getTime();\n\n  let years = 0;\n  let days = 0;\n  let hours = 0;\n  let minutes = 0;\n  let seconds = 0;\n\n  CalcTime();\n  setInterval(CalcTime, 1000);\n\n  function CalcTime() {\n    let timeleft = endDate - Date.now();\n\n    // Calculating the days, hours, minutes and seconds left\n    seconds = Math.floor((timeleft % (1000 * 60)) / 1000);\n    minutes = Math.floor((timeleft % (1000 * 60 * 60)) / (1000 * 60));\n    hours = Math.floor((timeleft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    days = Math.floor((timeleft / (1000 * 60 * 60 * 24)) % 365);\n    years = Math.floor(timeleft / (1000 * 60 * 60 * 24 * 365));\n  }\n</script>\n\n<div>\n  <h1>{years}<span class=\"timeName\">years</span></h1>\n  <h1>{days}<span class=\"timeName\">days</span></h1>\n  <h1>\n    {hours}<span class=\"timeName\">hours</span>\n    {minutes}<span class=\"timeName\">minutes</span>\n    {seconds}<span class=\"timeName\">seconds</span>\n  </h1>\n</div>\n\n<style lang=\"scss\">\n  .timeName {\n    font-size: medium;\n  }\n\n  div h1 {\n    display: inline;\n  }\n</style>\n","<script>\n  import Timer from \"./Timer.svelte\";\n  const startDate = new Date(\"Jan 1 1980\");\n  const endDate = new Date(\"Jul 21 2029\");\n\n  const diff = 100 / (endDate.getTime() - startDate.getTime());\n\n  let percentage;\n  calcPercentage();\n  setInterval(calcPercentage, 1000);\n  function calcPercentage() {\n    percentage = Math.abs(Date.now() - startDate.getTime()) * diff;\n  }\n\n  let v = 0;\n  setInterval(() => {\n    document.documentElement.style.setProperty(\"--offset\", `${v}px`);\n    v += 0.2;\n  }, 1);\n</script>\n\n<div class=\"main\">\n  <div>\n    <h1 style=\"font-size: 1em;\">\n      Time left until climate change is irreversible:\n    </h1>\n    <Timer />\n  </div>\n  <div class=\"progress\">\n    <div class=\"progressBg\">\n      <div\n        class=\"progressBar\"\n        style=\"width: {percentage}%; background-color: red;\"\n      />\n    </div>\n  </div>\n</div>\n\n<style lang=\"scss\">\n  :root {\n    --offset: 0px;\n  }\n\n  .main {\n    padding: 2rem 0;\n    max-width: 1100px;\n    margin: 0 auto;\n    width: 100%;\n  }\n\n  .progress {\n    height: 3rem;\n    div {\n      height: 100%;\n    }\n    border-radius: 10px;\n    box-sizing: border-box;\n    border: 5px #000 solid;\n    background-color: black;\n\n    .progressBg {\n      background-color: white;\n      position: relative;\n      border-radius: 5px;\n\n      .progressBar {\n        border-radius: 5px;\n        position: relative;\n        z-index: 1;\n      }\n    }\n  }\n\n  .progressBar::before {\n    content: \"\";\n    position: absolute;\n    top: 0px;\n    right: 0px;\n    bottom: 0px;\n    left: 0px;\n    background-image: url(/images/loadingLine.svg);\n    background-repeat: repeat-x;\n    background-position-x: var(--offset);\n    opacity: 0.2;\n    z-index: 0;\n  }\n\n  @media only screen and (max-width: 1150px) {\n    .main {\n      width: auto;\n    }\n  }\n</style>\n","export const GenRandom = (max, min = 0) => {\n    return Math.floor(Math.random() * (max - min) + min);\n};\n","<script lang=\"ts\">\n  import { onMount } from \"svelte\";\n\n  import Earth from \"./Components/Earth.svelte\";\n  import F1 from \"./Components/Factories/F1.svelte\";\n  import F2 from \"./Components/Factories/F2.svelte\";\n  import F3 from \"./Components/Factories/F3.svelte\";\n  import ProgressBar from \"./Components/ProgressBar.svelte\";\n  import { GenRandom } from \"./ts/utils\";\n\n  const minBubbleSize = 20,\n    maxBubbleSize = 35;\n\n  let spawnpoints: Array<{\n    spawn: HTMLElement;\n    creator: HTMLElement | Element;\n  }> = [];\n\n  onMount(() => {\n    const cSpawns = document.getElementsByClassName(\"createSpawn\");\n    for (const spawn of cSpawns) {\n      const span = document.createElement(\"span\");\n      span.style.position = \"absolute\";\n      span.style.left =\n        window.pageXOffset + spawn.getBoundingClientRect().left - 10 + \"px\";\n      span.style.top =\n        window.pageYOffset + spawn.getBoundingClientRect().top + \"px\";\n\n      span.classList.add(\"spawn\");\n      spawnpoints.push({ spawn: span, creator: spawn });\n      document.querySelector(\"main\").appendChild(span);\n    }\n    Spawning();\n  });\n\n  async function Spawning() {\n    const point = spawnpoints[GenRandom(spawnpoints.length)];\n    const div = document.createElement(\"span\");\n    const size = GenRandom(maxBubbleSize, minBubbleSize);\n    const lifetime =\n      window.innerWidth > 615 ? GenRandom(5, 10) : GenRandom(3, 5);\n\n    div.style.height = `${size}px`;\n    div.style.width = div.style.height;\n    div.style.zIndex = GenRandom(3).toString();\n\n    let color = \"#\";\n    if (point.spawn.hasAttribute(\"color\"))\n      color = point.spawn.getAttribute(\"color\");\n    // If two colors were provided\n    else if (point.spawn.hasAttribute(\"colors\")) {\n      // split colors provided into array\n      const colors = point.spawn\n        .getAttribute(\"colors\")\n        .split(/\\s*;\\s*/)\n        .slice(0, 2);\n      console.log(colors);\n\n      const color1Vals = [];\n      const color2Vals = [];\n\n      // convert each set of 2 Hex numbers to Ints\n      colors[0]\n        .replace(\"#\", \"\")\n        .match(/.{1,2}/g)\n        .map((v) => {\n          color1Vals.push(parseInt(v, 16));\n        });\n\n      colors[1]\n        .replace(\"#\", \"\")\n        .match(/.{1,2}/g)\n        .map((v) => {\n          color2Vals.push(parseInt(v, 16));\n        });\n\n      // Iterate through each number and generate one between them.\n      color1Vals.map((v, i) => {\n        let gNum;\n        if (v < color2Vals[i]) gNum = GenRandom(color2Vals[i], v);\n        else if (v > color2Vals[i]) gNum = GenRandom(v, color2Vals[i]);\n        else gNum = v;\n        color += gNum.toString(16);\n      });\n    } else color = \"#000\";\n\n    div.style.backgroundColor = color;\n    div.style.opacity = `${GenRandom(80, 30) / 100}`;\n    div.style.borderRadius = \"50%\";\n    div.style.position = \"absolute\";\n\n    point.spawn.appendChild(div);\n    FloatDiv(div, 0);\n    setTimeout(async () => {\n      div.style.animation = \"fadeOut 2s ease-out forwards\";\n      setTimeout(() => {\n        point.spawn.removeChild(div);\n      }, 2000);\n    }, lifetime * 1000);\n\n    setTimeout(Spawning, 50);\n  }\n\n  async function FloatDiv(\n    div: HTMLSpanElement,\n    ypos,\n    size = 0,\n    desxpos = 0,\n    xpos = 0\n  ) {\n    ypos++;\n    if (size < 1) size += 0.01;\n\n    if (desxpos == ~~xpos) desxpos = GenRandom(10, -10);\n    xpos += desxpos < xpos ? -0.3 : 0.3;\n\n    div.style.transform = `translateY(${-ypos}px) translateX(${xpos}px) scale(${size})`;\n    setTimeout(async () => FloatDiv(div, ypos, size, desxpos, xpos), 20);\n  }\n\n  onMount(res);\n  function res() {\n    document.getElementById(\"sticks\").style.top = `${\n      document.getElementById(\"earth\").clientHeight / 2\n    }px`;\n\n    for (let i = 0; i < spawnpoints.length; i++) {\n      spawnpoints[i].spawn.style.left =\n        window.pageXOffset +\n        spawnpoints[i].creator.getBoundingClientRect().x -\n        10 +\n        \"px\";\n\n      spawnpoints[i].spawn.style.top =\n        window.pageYOffset +\n        spawnpoints[i].creator.getBoundingClientRect().top +\n        \"px\";\n    }\n  }\n</script>\n\n<svelte:window on:resize={res} />\n<main style=\"height: 100vh; display: flex; flex-direction: column; gap: 5rem;\">\n  <h1 style=\"text-align: center; padding-top: 2rem\">\n    The Earth is being cooked, while we are in it.\n  </h1>\n  <div class=\"shawarma\">\n    <div class=\"sticks\" id=\"sticks\">\n      <img src=\"./images/stick-t.png\" id=\"t\" alt=\"\" />\n      <div class=\"sides\">\n        <img src=\"./images/stick.png\" id=\"l\" alt=\"\" />\n        <img src=\"./images/stick.png\" id=\"r\" alt=\"\" />\n      </div>\n    </div>\n    <Earth />\n\n    <div class=\"factoryContainer\">\n      <div style=\"left: 50%; transform: translateX(-75%);\">\n        <F3 />\n      </div>\n      <div style=\"left: 50%; transform: translateX(-10%);\">\n        <F2 />\n      </div>\n      <div style=\"left: 50%; transform: translateX(-50%);\">\n        <F1 />\n      </div>\n    </div>\n  </div>\n  <ProgressBar />\n</main>\n\n<style lang=\"scss\" global>\n  @import \"./styles/vars.scss\";\n  .shawarma {\n    width: 50%;\n    margin: auto;\n    position: relative;\n  }\n  svg {\n    width: 15rem;\n  }\n  .factoryContainer {\n    z-index: 3;\n    margin: 50px 0 0 0;\n    width: 100%;\n    position: relative;\n    height: 15rem;\n    div {\n      position: absolute;\n      bottom: 0;\n    }\n  }\n\n  .sticks {\n    position: absolute;\n    width: 100%;\n    bottom: 25%;\n    bottom: 0;\n    display: flex;\n    flex-direction: column;\n\n    #t {\n      width: 100%;\n      transform: scaleX(1.2);\n      height: 5px;\n    }\n\n    .sides {\n      height: 100%;\n      display: flex;\n      justify-content: space-between;\n      #r {\n        right: 0;\n      }\n\n      #r,\n      #l {\n        width: 5px;\n        height: 100%;\n        transform: scale(1.1);\n      }\n    }\n  }\n\n  @keyframes grow {\n    from {\n      transform: scale(0.3);\n    }\n    to {\n      transform: scale(1);\n    }\n  }\n\n  @keyframes fadeOut {\n    to {\n      opacity: 0;\n    }\n  }\n\n  @media only screen and (max-width: 1024px) {\n    .shawarma {\n      width: 75%;\n    }\n    svg {\n      width: 10rem;\n    }\n  }\n\n  img,\n  .unselectalble {\n    user-select: none;\n  }\n</style>\n","import App from \"./App.svelte\";\nconst app = new App({\n    target: document.body,\n    props: {},\n});\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","svg_element","createElementNS","text","data","createTextNode","space","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_style","key","important","style","setProperty","current_component","set_current_component","component","onMount","Error","get_current_component","$$","on_mount","push","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","flushing","seen_callbacks","Set","flush","i","length","update","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","transition_in","block","local","delete","transition_out","o","outros","c","d","globals","window","globalThis","global","create_component","mount_component","customElement","on_destroy","m","new_on_destroy","map","filter","destroy_component","detaching","make_dirty","then","fill","init","options","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","type","index","indexOf","splice","$set","$$props","obj","$$set","keys","endDate","Date","getTime","years","days","hours","minutes","seconds","CalcTime","timeleft","now","Math","floor","setInterval","startDate","diff","percentage","calcPercentage","abs","v","documentElement","GenRandom","max","min","random","event","handler","addEventListener","removeEventListener","spawnpoints","Spawning","point","div","size","lifetime","innerWidth","height","width","zIndex","toString","color","spawn","hasAttribute","colors","split","slice","console","log","color1Vals","color2Vals","replace","match","parseInt","gNum","backgroundColor","opacity","borderRadius","position","FloatDiv","setTimeout","animation","ypos","desxpos","xpos","transform","res","getElementById","top","clientHeight","left","pageXOffset","creator","getBoundingClientRect","x","pageYOffset","cSpawns","getElementsByClassName","span","classList","querySelector","body"],"mappings":"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"}